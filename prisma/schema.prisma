// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  password      String?   // For credentials authentication
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // App relations
  trackedProjects Project[] @relation("UserTrackedProjects")
  notifications   Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  fullName    String   @unique // e.g., "SeleniumHQ/selenium"
  description String?
  language    String?
  stars       Int      @default(0)
  forks       Int      @default(0)
  watchers    Int      @default(0)
  avatar      String?
  homepage    String?
  topics      String?  // Comma-separated topics/tags
  isPrivate   Boolean  @default(false)
  isArchived  Boolean  @default(false)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  versions      Version[]
  trackedBy     User[]    @relation("UserTrackedProjects")
  notifications Notification[]

  @@map("projects")
}

model Version {
  id          String   @id @default(cuid())
  tagName     String   // e.g., "v4.15.0"
  name        String?  // Release name
  body        String?  // Release description/changelog
  isPrerelease Boolean @default(false)
  isDraft     Boolean  @default(false)
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagName])
  @@map("versions")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // "new_release", "update", "error"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}
