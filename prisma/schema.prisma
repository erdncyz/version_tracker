generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  name                  String?
  avatar                String?
  password              String?
  emailVerified         DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  accounts              Account[]
  notifications         Notification[]
  sessions              Session[]
  user_project_versions user_project_versions[]
  trackedProjects       Project[]               @relation("UserTrackedProjects")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id                    String                  @id @default(cuid())
  name                  String
  fullName              String                  @unique
  description           String?
  language              String?
  stars                 Int                     @default(0)
  forks                 Int                     @default(0)
  watchers              Int                     @default(0)
  avatar                String?
  homepage              String?
  topics                String?
  isPrivate             Boolean                 @default(false)
  isArchived            Boolean                 @default(false)
  lastChecked           DateTime                @default(now())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  notifications         Notification[]
  user_project_versions user_project_versions[]
  versions              Version[]
  trackedBy             User[]                  @relation("UserTrackedProjects")

  @@map("projects")
}

model Version {
  id                    String                  @id @default(cuid())
  tagName               String
  name                  String?
  body                  String?
  isPrerelease          Boolean                 @default(false)
  isDraft               Boolean                 @default(false)
  publishedAt           DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  projectId             String
  user_project_versions user_project_versions[]
  project               Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagName])
  @@map("versions")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model user_project_versions {
  id        String   @id
  userId    String
  projectId String
  versionId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  versions  Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  projects  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}
